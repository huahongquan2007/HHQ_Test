%%%%%%%% ACTIVE SHAPE MODEL %%%%%%%%%%%%%%
clear all; clc; close all;

options = struct;
options.filePath = 'data2\';

options.training = true;
%options.training = false;

options.numOfLandmark = 79;
options.numOfTrnImgs = -1;
options.listFile = -1;

options.numOfSamplePixel = 15;
options.numOfTestPixel = 31;

%% STEP 1: Obtain landmark coordinates from each shape in training set
% Input:
%	filePath : Path to dtataset directory
%	numOfLandmark: num of Landmark Points
% Output: 
%	'unaligned training set shape coordinates' matrix Xu with rows = 2 * numOfLandmark, cols = numOfTrnImgs
% 	numOfLandmarkPoints = number of Landmark Points
%	numOfTrnImgs = number of Traing Set Images


TrainingData = struct;
if (options.training == true)
    options.filePath = [ options.filePath '\'];
    options.listFile = dir( fullfile(options.filePath, '*.asf')  );
    
    if options.numOfTrnImgs == -1
        options.numOfTrnImgs = size(options.listFile, 1);
    end
   
    % TrainingData.fullData : numOfLandmark, numColumnData , numOfTrnImgs
    % [79x7x46]
    numColumnData = 7;
    % <path#> <type> <x rel.> <y rel.> <point#> <connects from> <connects to>
    
    [ TrainingData.Xu TrainingData.fullData] = loadTrainingData( options.numOfLandmark, numColumnData, options.numOfTrnImgs, options.filePath, options.listFile);
    
    disp('Done step 1');

%% STEP 2: Align The Training Shape
% Input: 'unaligned training set shape coordinates' matrix Xu
% Output:  'aligned training set shape coordinates' matrix Xa with rows = 2
% * numLandmarkPoints, cols = numTrnSetImgs    
    TrainingData.Xa = alignTrainingData( TrainingData.Xu );

    disp('Done step 2');
%% STEP 3: Shape Model

    ShapeData = makeShapeModel( TrainingData.Xa, options);

    disp('Done step 3');

%% STEP 4: Local Appearance Model

    AppearanceData = makeAppearanceModel( TrainingData.fullData, options);

    disp('Done step 4');
    
    save 'options.mat' options
    save 'TrainingData.mat' TrainingData;
    save 'ShapeData.mat' ShapeData;
    save 'AppearanceData.mat' AppearanceData;
    
else
    load 'options.mat';
    load 'TrainingData.mat';
    load 'ShapeData.mat';
    load 'AppearanceData.mat';
end % end if training == true

%% TESTING

disp('Testing steps:');
disp('+ Use mouse to draw a bounding box for face');
disp('+ Double click mouse to continue testing');


iImg = 2;
curImgName = [options.listFile(iImg).name(1 : size(options.listFile(iImg).name , 2) - 6) '.bmp'];
curImg = rgb2gray( im2double(imread([options.filePath curImgName])) ) ; % read grayscale

%% STEP 1: Get the bounding box

% hf = figure;
% imshow(curImg);
% h = imrect;
% position = wait(h);
% posRect = getPosition(h); % pos = x1 x2 width height    
% save 'posRect.mat' posRect;
% close (hf) ;

load 'posRect.mat';

pos = [posRect(1) posRect(2) posRect(1)+posRect(3) posRect(2)+posRect(4)];
% pos = x1 x2, x3 x4 where x1,x2 is top left, x3 x4 is bottom right

    %% Plot the bounding box 
    %%%Plot the bounding box
    figure;
    axis([0,600,0,600]);
    imagesc(curImg);
    colormap(gray);
    hold on;

    plot([pos(1) pos(3)],[pos(2) pos(2)],'r');
    plot([pos(3) pos(3)],[pos(2) pos(4)],'r');
    plot([pos(3) pos(1)],[pos(4) pos(4)],'r');
    plot([pos(1) pos(1)],[pos(4) pos(2)],'r');

%% STEP 2: Align the meanshape over bounding box
%%%Transform the mean shape
cur = reshape( ShapeData.meanShape, 79 , 2);
centerOfRect = [posRect(1)+posRect(3)/2  posRect(2)+posRect(4)/2 ];

curLandMark = cur( 3 , :)' ; % 3rd
nextLandMark = cur(  13, :)';% 13th
scale = posRect(3) / dist(curLandMark(1), nextLandMark(1) );

cur = cur * scale;
cur(:,1) = cur(:,1) + centerOfRect(1);
cur(:,2) = cur(:,2) + centerOfRect(2);

plot ( cur(:,1) , cur(:,2),'b*'); 
oldStuff = cur;
lastCur = zeros(size(cur,1),size(cur,2));
for i = 1 : 20
%% STEP 3: Update the shape using local appearance
    cur = chooseBestCandidate(curImg, cur, AppearanceData, options);
    save 'cur.mat' cur;
    %% Find shape coefficient for the current shape
    cur = findShapeCoefficient(cur, ShapeData, options);

    %% Check which ones is converged
    converged = zeros(size(cur,1));
    
    for 1 = 1:size(cur,1)
        errors = Xmean - Xmean0;
        
    end
    
    
    %% Plot stuffs
        imagesc(curImg);
        plot ( oldStuff(:,1) , oldStuff(:,2),'b*'); 
        for iLandMark = 1 : 79
            plot( cur(iLandMark, 1), cur(iLandMark, 2) , 'g*');
            pause(0.05);
        end
    lastCur = cur;
%         
%         pause(5);
end

